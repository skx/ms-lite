#!/usr/bin/perl -w
#
#  Here we archive the mail as it wa rejected for being spam.
#
#  We write our archive of rejected messages beneath /spam/ with a subdirectory
# for every day, and then for the domain itself.
#
#  For example a mail rejected on the 10th day of the year, which was originally
# sent to bob@steve.org.uk will be written to:
#
#    /spam/10/steve.org.uk/{new cur tmp}
#
#  To speedup the display of quarantined mail a simple index of each rejected
# mail is also written to:
#
#    /spam/10/steve.org.uk/index
#
#  (In the real mail-scanning.com service this data was stored in MySQL.)
#
# Steve
# --
#



use Qpsmtpd::Constants;

use Fcntl qw(:flock);
use File::Path qw(mkpath);
use JSON;
use Sys::Hostname qw(hostname);
use Time::HiRes qw(gettimeofday);

use strict;
use warnings;



my $_counter = 0;




=begin doc

Process our arguments - we expect a single directory to be passed to
us which is the prefix for our archive.

=end doc

=cut

sub register
{
    my ( $self, $qp, @args ) = @_;

    if ( @args > 0 )
    {
        ( $self->{ _maildir } ) = ( $args[0] =~ m!([/\w\.]+)! );
    }

    unless ( $self->{ _maildir } )
    {
        $self->log( LOGWARN, "WARNING: maildir directory not specified" );
        return 0;
    }

    my $hostname = ( hostname =~ m/([\w\._\-]+)/ )[0];
    $self->{ _hostname } = $hostname;
}




=begin doc

If this mail is to be rejected then archive it to disk.

=end doc

=cut

sub hook_queue
{
    my ( $self, $transaction ) = @_;

    #
    # If the mail is not rejected then return immediately.
    #
    if ( 0 == ( $transaction->notes("reject") || 0 ) )
    {
        return DECLINED;
    }

    #
    #
    # Get the domain the mail is sent to, and archive it,
    # with one copy for each recipient.
    #
    foreach my $recipient ( $transaction->recipients )
    {
        $recipient =~ s/^<//g;
        $recipient =~ s/>$//g;

        my $to = $recipient;

        if ( $recipient =~ /(.*)@(.*)/ )
        {
            $recipient = $2;
        }
        $recipient = lc($recipient);


        #
        #  The day of the year is the thing we care about for archiving
        # purposes.
        #
        my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
          localtime(time);


        #
        #  Now the location where we'll archive the message
        #
        my $dir = $self->{ _maildir } . "/$yday/$recipient";


        if ( !-d $dir )
        {
            $self->log( LOGWARN,
                    "Creating rejected directory for domain $recipient: $dir" );
            mkpath $dir, 0, 0775;
        }

        else
        {
            $self->log( LOGWARN, "Archiving spam for domain $recipient" );
        }

        # ensure the maildir directories exist.
        map {my $d = $dir . "/$_"; -e $d or mkpath $d, 0, 0775} qw(cur tmp new);

        my ( $time, $microseconds ) = gettimeofday;

        $time = ( $time =~ m/(\d+)/ )[0];
        $microseconds =~ s/\D//g;

        my $unique = "P$$" . "M$microseconds" . "Q" . $_counter++;
        my $file = join ".", $time, $unique, $self->{ _hostname };

        # tack on the recipient.
        $file .= ".$recipient";


        open( MF, ">$dir/tmp/$file" ) or
          $self->log( LOGWARN, "could not open $dir/tmp/$file: $!" ),
          return ( DECLINED, "queue error (open)" );

        # save the recipient as the real address.
        print MF "Recipient: $to\n";
        $transaction->header->print( \*MF );
        $transaction->body_resetpos;
        while ( my $line = $transaction->body_getline )
        {
            print MF $line;
        }

        close MF or
          $self->log( LOGWARN, "could not close $dir/tmp/$file: $!" ) and
          return ( DECLINED, "queue error (close)" );

        link "$dir/tmp/$file", "$dir/new/$file"
          or
          $self->log( LOGWARN,
                      "could not link $dir/tmp/$file to $dir/new/$file: $!" )
          and
          return ( DECLINED, "queue error (link)" );

        unlink "$dir/tmp/$file";


        #
        #  Get data to be included in the index
        #
        my %h;
        $h{ 'from' }      = $transaction->notes("MAIL-FROM") . " ";
        $h{ 'ip' }        = $self->qp->connection->remote_ip;
        $h{ 'host' }      = $self->qp->connection->remote_host;
        $h{ 'helo' }      = $self->qp->connection->hello_host;
        $h{ 'reason' }    = $transaction->notes("reason") || "Unknown reason";
        $h{ 'subject' }   = $transaction->header->get("Subject") || "";
        $h{ 'recipient' } = $to;
        $h{ 'filename' }  = $file;

        #
        #  Optional message-ID.
        #
        #  These should be present, but often aren't.
        #
        my $msg = $transaction->header->get('Message-Id') || '';
        $h{ 'message-id' } = $msg if ( $msg && length($msg) );

        # strip newlines
        foreach my $x ( keys %h )
        {

            # remove newlines
            $h{ $x } =~ s/[\r\n]//g;

            # remove leading/trailing space
            $h{ $x } =~ s/^\s+|\s+$//g;
        }

        #
        #  Append to the index, using locking so we don't get fucked over.
        #
        open( DAT, ">>", "$dir/index.json" );
        flock( DAT, LOCK_EX );

        my $j = JSON->new->allow_blessed;
        print DAT $j->encode( \%h ) . "\n";
        close(DAT);
    }


    my $msg_id = $transaction->header->get('Message-Id') || '';
    $msg_id =~ s/[\r\n].*//s;
    return ( DECLINED, "archive_spam - $msg_id" );

    #
    #  Proceed to queue/deliver where the bounce will be signalled.
    #
    return DECLINED;
}



#
#  End of module
#
1;
