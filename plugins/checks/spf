#!/usr/bin/perl
#
# Test incoming email against any SPF records which might be present.
#


use Qpsmtpd::Constants;


sub hook_data_post
{
    my ( $self, $transaction ) = (@_);


    #
    # If the mail is already rejected, then terminate quickly.
    #
    if ( ( $transaction->notes("reject") || 0 ) == 1 )
    {
        $self->log( LOGWARN,
                    $self->plugin_name() .
                      ": terminating as mail is already rejected"
                  );
        return DECLINED;
    }



    #
    # Get the domain this mail is for - this domain is setup
    # in the 'test_recipient' plugin
    #
    my $domain = $transaction->notes("DOMAIN") || undef;
    return DECLINED unless ( defined($domain) );



    #
    # If this check isn't enabled then return immediately
    #
    if (
        !(  ( -e "/srv/$domain/checks/spf" ) || ( -e "/srv/$domain/checks/all" )
         ) )
    {
        $self->log( LOGWARN,
                $self->plugin_name() . ": plugin disabled for domain $domain" );
        return DECLINED;
    }


    #
    # Get the HELO name the client sent.
    #
    my $helo = $self->qp->connection->hello_host;

    #
    # Get the remote IP from the connecting-host.
    #
    my $ip = $self->qp->connection->remote_ip;


    #
    # Get the sender.
    #
    my $from = $transaction->notes("MAIL-FROM") || "<>";
    $from =~ s/^<|>$//g;
    $from = lc($from);

    #
    # If we have an empty sender then abort.
    #
    return DECLINED if ( !length($from) );


    #
    #  Now perform the SPF-magic.
    #
    my $spf_server = Mail::SPF::Server->new();
    my $request =
      Mail::SPF::Request->new( versions      => [1, 2],
                               scope         => 'mfrom',
                               identity      => $from,
                               ip_address    => $ip,
                               helo_identity => $helo
                             );


    #
    # Get the SPF-result
    #
    my $result = $spf_server->process($request);
    $self->log( LOGWARN, "SPF $from -> $result" );

    #
    # End of processing.
    #
    return DECLINED;
}




#
# End of plugin
#
1;
