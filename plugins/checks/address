#!/usr/bin/perl
#
# Block mail which has bogus To/From fields in the mail body.
#
# Note: We do test for valid recipients via the globlal/test_recipient
# plugin, but that is for the envelope recipient not the one(s) listed
# in the mail.
#


use Qpsmtpd::Constants;


sub hook_data_post
{
    my ( $self, $transaction ) = (@_);


    #
    # If the mail is rejected terminate quickly
    #
    if ( ( $transaction->notes("reject") || 0 ) == 1 )
    {
        $self->log( LOGWARN,
                    $self->plugin_name() .
                      ": terminating as mail is already rejected"
                  );
        return DECLINED;
    }



    #
    # Get the domain this mail is for - this domain is setup
    # in the 'test_recipient' plugin
    #
    my $domain = $transaction->notes("domain") || undef;
    return DECLINED unless ( defined($domain) );



    #
    # If this check isn't enabled then return immediately
    #
    if (
         !( ( -e "/srv/$domain/checks/address" ) ||
            ( -e "/srv/$domain/checks/all" ) ) )
    {
        $self->log( LOGWARN,
                $self->plugin_name() . ": plugin disabled for domain $domain" );
        return DECLINED;
    }


    #
    #  Make sure we have a Date header.
    #
    my $from = $transaction->header->get('From') || undef;

    #
    #  Ensure both headers are present
    #
    foreach my $header (qw! From !)
    {
        my $val = $transaction->header->get($header) || undef;

        if ( !defined($val) || !length($val) )
        {
            $transaction->notes( "reject",  1 );
            $transaction->notes( "blocker", $self->plugin_name() );
            $transaction->notes( "reason",  "$header: missing or empty." );
            return DECLINED;
        }

        #
        #  The header might have multiple addresses separated by ",".
        #
        foreach my $term ( split( /,/, $val ) )
        {

            #
            # strip whitespace
            #
            $term =~ s/^\s+|\s+$//g;
            $term = lc($term);

            #
            #  Convert from:
            #   "Steve Kemp" <bob@steve.org.uk>"
            #
            #  to: steve@steve.org.uk
            #
            if ( $term =~ /<([^>]+)>$/ )
            {
                $term = $1;
            }

            #
            #  There are multiple things we can test on, but here we
            # just test the initial character
            #
            if ( $term =~ /^[-|_!]/ )
            {
                $transaction->notes( "reject",  1 );
                $transaction->notes( "blocker", $self->plugin_name() );
                $transaction->notes( "reason",
                             "Bogus initial character $header header : $term" );
                return DECLINED;
            }

            #
            #  Test for multiple "@" signs
            #
            if ( $term =~ /@@/ )
            {
                $transaction->notes( "reject",  1 );
                $transaction->notes( "blocker", $self->plugin_name() );
                $transaction->notes( "reason",
                                   "$header: contains two '\@' signs : $term" );
                return DECLINED;
            }


        }
    }



    #
    #  Terminate.
    #
    $self->log( LOGWARN,
         $self->plugin_name() . ": plugin passed - mail will not be rejected" );

    return DECLINED;
}




#
# End of plugin
#
1;
