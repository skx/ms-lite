#!/usr/bin/perl -w
#
# A simple plugin to test each incoming connection against a per-domain
# list of DNS-blacklists.
#
# Steve
# --
#



use strict;

use Net::DNS::Resolver;
use Qpsmtpd::Constants;



=begin doc

  Hook at data time.

=end doc

=cut

sub hook_data_post
{
    my ( $self, $transaction ) = (@_);


    #
    # If the mail is rejected terminate quickly
    #
    if ( ( $transaction->notes("reject") || 0 ) == 1 )
    {
        $self->log( LOGWARN,
                    $self->plugin_name() .
                      ": terminating as mail is already rejected"
                  );
        return DECLINED;
    }



    #
    # Get the domain this mail is for - this domain is setup
    # in the 'test_recipient' plugin
    #
    my $domain = $transaction->notes("domain") || undef;
    return DECLINED unless ( defined($domain) );

    #
    # Are there any zones defined?
    #
    if ( ! -e "/srv/$domain/zones" )
    {
        $self->log( LOGWARN,
                $self->plugin_name() . ": no DNSBL zones for domain $domain" );
        return DECLINED;
    }

    #
    #  The IP that is connecting, and the reverse of that.
    #
    my $remote_ip   = $self->qp->connection->remote_ip;
    my $reversed_ip = join(".", reverse(split(/\./, $remote_ip)));

    #
    #  The DNS resolver we're going to use.
    #
    my $res     = Net::DNS::Resolver->new;

    #
    #  Open the list of zones
    #
    open( ZONES, "<", "/srv/$domain/zones" )
      or $self->log( LOGWARN, "Failed to open /srv/$domain/zones $!" ), return DECLINED;

    #
    # For each zonefile listed.
    #
    foreach my $zone ( <ZONES> )
    {
        #
        #  Remove the trailing newline, and skip empty lines or comments.
        #
        chomp( $zone);
        next if ( !length($zone) || ( $zone =~ /^#/ ) );

        #
        # Skip if there were multiple zones and we're listed in one
        # already.
        #
        next if ( ( $transaction->notes("reject") || 0 ) == 1 );

        #
        #  Do the lookup
        #
        my $query = $res->search( $reversed_ip . "." . $zone );

        if ($query)
        {
            foreach my $rr ($query->answer)
            {
                my $name = $rr->name;
                if ( $rr->type eq "A" )
                {
                    my $result = $rr->address;
                    $self->log( LOGWARN, "Found result [$result] for $remote_ip in zone $zone" );
                    #
                    # Mark the mail as rejected
                    #
                    $transaction->notes( "reject",  1 );
                    $transaction->notes( "blocker", $self->plugin_name() );
                    $transaction->notes( "reason",  "$remote_ip listed in DNS blacklist $zone" );
                }
            }
        }
        else
        {
            $self->log( LOGWARN, "Query of $reversed_ip.$zone failed for [$remote_ip]: " .  $res->errorstring );
        }
    }
    close( ZONES );

    #
    #  All done
    #
    return DECLINED;
}
