#!/usr/bin/perl -w

=head1 NAME

expire-quarantine - Remove old rejected mail.

=cut

=head1 SYNOPSIS

  expire-quarantine [options]

=cut

=head1 ABOUT

 Expire the rejected messages which are located beneath /spam.

  We'll keep 30 days of history, and ensure that /spam/today always
 points to the rejected messages for the current day.

=cut

=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut




use strict;
use warnings;

use File::Basename qw! basename !;
use Getopt::Long;
use Pod::Usage;



#
#  Configuration options
#
my %CONFIG;
$CONFIG{ 'prefix' } = "/spam";




#
#  Parse command lines arguments, if any are present.
#
parseCommandLineArguments();



#
# Ensure the directory exists
#
if ( !-d $CONFIG{ 'prefix' } )
{
    print "SPAM archive / quarantine directory not found: $CONFIG{'prefix'}\n";
    exit 1;
}



#
#  The entries we should keep.
#
my %keep = populateKeep();


#
#  Now for each directory we find which isn't to be kept remove.
#
foreach my $entry ( sort( glob( $CONFIG{ 'prefix' } . "/*" ) ) )
{
    my $date = basename($entry);

    if ( !$keep{ $date } )
    {
        $CONFIG{'verbose'} && print "Removing: $entry\n";

        system("rm -rf $entry");
    }
}


#
#  Ensure that /spam/today points to the current day.
#
if ( -e "/spam/today" )
{
    unlink("/spam/today");
}


my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
  localtime(time);
link( "/spam/today", "/spam/$yday" );



exit 0;





=begin doc

Return a hash - the keys of which correspond to directories we should
keep which are found beneath /spam/.

This might require some explaination, but in short when we archive a mail
for "example.com" we write that to disk beneath:

/spam/312/example.com/

(Where 312 is the current day of the year.)

This means to work out what we want to keep we simply get the current day
of the year, and then keep the 30 previous days.  We are careful to wrap
backwards if we reach "0" to "day 365" of the previous year.

=end doc

=cut


sub populateKeep
{
    my %keep;

    #
    #  Get the current day of the year "yday"
    #
    my ( undef, undef, undef, undef, undef, undef, undef, $yday, undef ) =
      localtime(time);


    #
    # Count of days.
    #
    my $count = 0;

    #
    # We hedge the 30 day period to cope with both long months and
    # leap years.
    #
    while ( $count <= 33 )
    {

        # keep the mail for this year day
        $keep{ $yday } += 1;

        # move on to the previous year-day and wrap correctly.
        $yday -= 1;
        if ( $yday < 0 )
        {
            $yday = 366;
        }

        # we've done a day
        $count += 1;

    }
    return (%keep);
}



sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;


    if (
        !GetOptions(

            # Help options
            "help",   \$HELP,
            "manual", \$MANUAL,

            # General options
            "verbose", \$CONFIG{ 'verbose' },
        ) )
    {
        exit 1;
    }

    pod2usage(1) if $HELP;
    pod2usage( -verbose => 2 ) if $MANUAL;

}
